#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# ❔ แบบฝึกหัด จงรันโปรแกรมและอธิบายผลลัพธ์ทาง output ของบรรทัดคำสั่งต่อไปนี้

``` csharp
1. string name = "Hello";
    Console.WriteLine(String.Format("{0} there. I said {0}! {0}???", name));
```

#!csharp

// Coding Area
string name = "Hello";
    Console.WriteLine(String.Format("{0} there. I said {0}! {0}???", name));

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
String.Format("{0} there. I said {0}! {0}???", name) 
``` 
จะทำการแทน {0} ด้วยค่าของตัวแปร name ซึ่งคือ "Hello" ในทุกๆ ตำแหน่งที่มี {0} ในสตริง ทำให้ผลลัพธ์ที่ได้คือการแสดงข้อความ "Hello" ซ้ำหลายครั้งตามที่ระบุในสตริง.

#!markdown

``` csharp
2. Console.WriteLine("{2:d} {0:d} {1:d}", 1, 2, 3);
```

#!csharp

// Coding Area
Console.WriteLine("{2:d} {0:d} {1:d}", 1, 2, 3);

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("{2:d} {0:d} {1:d}", 1, 2, 3);
``` 
{2:d} จะใช้ค่าที่ตำแหน่งที่ 2 (เริ่มนับจาก 0) ในรายการพารามิเตอร์ ซึ่งคือ 3

#!markdown

``` csharp
3. Console.WriteLine("Hello " + "World");
```

#!csharp

// Coding Area
Console.WriteLine("Hello " + "World");

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("Hello " + "World");
``` 
โค้ดนี้ใช้การต่อสตริงด้วยเครื่องหมาย + เพื่อรวมข้อความ "Hello " และ "World" เข้าด้วยกัน ทำให้ได้ผลลัพธ์เป็น "Hello World".

#!markdown

``` csharp
4. Console.WriteLine("Here comes a slash \\");
```

#!csharp

// Coding Area
Console.WriteLine("Here comes a slash \\");

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("Here comes a slash \\");
``` 
เครื่องหมาย \ เป็นการใช้ ตัวอักษรพิเศษ

#!markdown

``` csharp
5. Console.WriteLine("|{0, 10}|", 999);
```

#!csharp

// Coding Area
Console.WriteLine("|{0, 10}|", 999);

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("|{0, 10}|", 999);
``` 
การแสดงผลข้อความที่จัดรูปแบบโดยการใส่ตัวเลข 999 ลงในช่องที่มีขนาด 10 ตัวอักษร โดยที่ตัวเลขจะถูกจัดชิดขวา

#!markdown

``` csharp
6. Console.WriteLine("|{0,-10}|", 000);
```

#!csharp

// Coding Area
Console.WriteLine("|{0,-10}|", 000);

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("|{0,-10}|", 000);
``` 
จะใช้ในการแสดงผลข้อความที่จัดรูปแบบโดยการใส่ตัวเลข 000 (หรือ 0) ลงในช่องที่มีขนาด 10 ตัวอักษร โดยที่ตัวเลขจะถูกจัดชิดซ้าย

#!markdown

``` csharp
7. Console.WriteLine("The value: {0}.", 500);
```

#!csharp

// Coding Area
Console.WriteLine("The value: {0}.", 500);

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("The value: {0}.", 500);
``` 
การแสดงผลข้อความที่มีการแทนที่ {0} ด้วยค่าของตัวแปรที่ส่งไป ซึ่งในที่นี้คือ 500

#!markdown

``` csharp
8. Console.WriteLine("The value: {0:C}.", 500);
```

#!csharp

// Coding Area
Console.WriteLine("The value: {0:C}.", 500);

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("The value: {0:C}.", 500);
``` 
การแสดงผลค่าของตัวแปร 500 โดยการใช้ตัวฟอร์แมต C (Currency) ซึ่งจะแสดงค่าตัวเลขในรูปแบบของสกุลเงิน

#!markdown

``` csharp
9. Console.WriteLine("{0,-10:F4}", 12.3456789);
```

#!csharp

// Coding Area
Console.WriteLine("{0,-10:F4}", 12.3456789);

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("{0,-10:F4}", 12.3456789);
``` 
0: แทนที่ตัวเลขด้วยค่าตัวแปรที่ส่งไป (ในที่นี้คือ 12.3456789).
-10: กำหนดให้ตัวเลขอยู่ในคอลัมน์ที่มีความกว้าง 10 ตัวอักษร และจัดชิดซ้าย.
F4: ฟอร์แมตเลขทศนิยม (Fixed-point) โดยให้แสดงตัวเลข 4 ตำแหน่งหลังจุดทศนิยม.

#!markdown

``` csharp
10. Console.WriteLine("{0,-10:C}", 12.3456789);
```

#!csharp

// Coding Area
Console.WriteLine("{0,-10:C}", 12.3456789);

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("{0,-10:C}", 12.3456789);
``` 
0: แทนที่ตัวเลขด้วยค่าที่ส่งไป (ในที่นี้คือ 12.3456789).
-10: กำหนดให้ตัวเลขอยู่ในคอลัมน์ที่มีความกว้าง 10 ตัวอักษร และจัดชิดซ้าย.
C: ฟอร์แมตสกุลเงิน (Currency)

#!markdown

``` csharp
11. Console.WriteLine("{0,-10:E3}", 12.3456789);
```

#!csharp

// Coding Area
Console.WriteLine("{0,-10:E3}", 12.3456789);

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("{0,-10:E3}", 12.3456789);
``` 
0: แทนที่ตัวเลขด้วยค่าที่ส่งไป (ในที่นี้คือ 12.3456789).
-10: กำหนดให้ตัวเลขอยู่ในคอลัมน์ที่มีความกว้าง 10 ตัวอักษร และจัดชิดซ้าย.
E3: ฟอร์แมตเลขในรูปแบบของเลขยกกำลัง (Scientific notation) โดยการแสดงผลจะมี 3 ตำแหน่งหลังจุดทศนิยม.

#!markdown

``` csharp
12. Console.WriteLine("{0,-10:x}", 65535);  // (x = lower case)
```

#!csharp

// Coding Area
Console.WriteLine("{0,-10:x}", 65535);  // (x = lower case)

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("{0,-10:x}", 65535);
``` 
0: แทนที่ตัวเลขด้วยค่าที่ส่งไป (ในที่นี้คือ 65535).
-10: กำหนดให้ตัวเลขอยู่ในคอลัมน์ที่มีความกว้าง 10 ตัวอักษร และจัดชิดซ้าย.
x: ฟอร์แมตให้แสดงเลขในรูปแบบฐาน 16 (Hexadecimal) โดยใช้ตัวอักษรเล็ก (a-f) สำหรับค่าที่มากกว่า 9.

#!markdown

``` csharp
13. Console.WriteLine("{0,-10:X}", 65535);  // (X = upper case)
```

#!csharp

// Coding Area
Console.WriteLine("{0,-10:X}", 65535);

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("{0,-10:X}", 65535);
``` 
0: แทนที่ตัวเลขด้วยค่าที่ส่งไป (ในที่นี้คือ 65535).
-10: กำหนดให้ตัวเลขอยู่ในคอลัมน์ที่มีความกว้าง 10 ตัวอักษร และจัดชิดซ้าย.
X: ฟอร์แมตให้แสดงเลขในรูปแบบฐาน 16 (Hexadecimal) โดยใช้ตัวอักษรตัวพิมพ์ใหญ่ (A-F) สำหรับค่าที่มากกว่า 9.

#!markdown

``` csharp
14. int i;
    Console.WriteLine("Value\tSquared\tCubed");
    for(i = 1; i < 10; i++)
        Console.WriteLine("{0}\t{1}\t{2}", i, i*i, i*i*i);
```

#!csharp

// Coding Area
int i;
    Console.WriteLine("Value\tSquared\tCubed");
    for(i = 1; i < 10; i++)
        Console.WriteLine("{0}\t{1}\t{2}", i, i*i, i*i*i);

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
int i;
    Console.WriteLine("Value\tSquared\tCubed");
    for(i = 1; i < 10; i++)
        Console.WriteLine("{0}\t{1}\t{2}", i, i*i, i*i*i);
``` 
จะพิมพ์ค่าของตัวเลขจาก 1 ถึง 9 พร้อมกับค่าของการยกกำลังสอง (Squared) และการยกกำลังสาม (Cubed) ของแต่ละตัวเลข

#!markdown

``` csharp
15. Console.WriteLine("{0:#.###}.", 1234.56789);
```

#!csharp

// Coding Area
Console.WriteLine("{0:#.###}.", 1234.56789);

#!markdown

## อธิบายผลลัพธ์ทาง Output
การใช้ 
``` csharp 
Console.WriteLine("{0:#.###}.", 1234.56789);
``` 
{0:#.###}:
#: หมายถึงแสดงตัวเลขที่ไม่เป็นศูนย์ แต่ถ้าเป็นศูนย์หลังจุดทศนิยมจะไม่แสดง.
.###: หมายถึงให้แสดงเลขทศนิยมสูงสุด 3 ตำแหน่ง และถ้ามีค่าหลังจุดทศนิยมมากกว่านั้น จะปัดทิ้งเกิน 3 ตำแหน่ง.
